# Copyright (C) 2010 Anand Patil
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


from optparse import OptionParser

# Create option parser
req_doc = """

mbg-areal-predict  Copyright (C) 2010 Anand Patil
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it under certain conditions.
See <http://www.gnu.org/licenses/> for the terms of the license.

Samples from the posterior predictive distribution of quantities of the form
\int_{a_1 \times \tau_1} f(s_1\ldots s_n, x, t)\ldots \int_{a_m \times \tau_m} f(s_1\ldots s_n, x, t)

where the $s$'s are spatial or spatiotemporal random fields, the $a$'s are areas 
(represented as Shapely geometries), the $\tau$'s are time intervals and $f$ is one
of the functions in map_postproc. A list of lists of samples from the posterior 
predictive distributions of $f$ is produced for each area/ time interval..


  module                The module from which maps are to be generated.
  database-file         The name of the database file produced by the mcmc.
  burn                  The number of initial MCMC iterations to discard. 
                        You must provide this argument.
"""
p = OptionParser('usage: %prog module database-file burn mask [options]' + req_doc)
p.add_option('-r','--reps',help='The number of repetitions to do, for purposes of computing Monte Carlo standard error. Defaults to 10.',dest='reps',type='int')
p.add_option('-x','--points',help='The number of spatial points to use for estimating areal integrals. Defaults to 100.',dest='points',type='int')
p.add_option('-i','--iter',help="The number of posterior predictive draws to take for each repetition. defaults to 1000.",dest='iter',type='int')
p.add_option('-t','--thin',help='How much to thin the MCMC trace. Defaults to 10.',dest='thin',type='int')
p.add_option('-w','--weight-raster',help="An optional raster giving relative weights. This can be used if weighted samples will give a better approximation to the integral than multiplying the integrand by the weight.",dest='weight_raster')
p.add_option('-c','--coordinate-time',help="If 'f', (x,t) samples are distributed randomly in the admin unit X the time interval. If 't', then to each 'x' sample there correspond multiple 't' samples and vice versa. Set this to true if your f's need to take an integral in time (or space), apply a nonlinear transformation, and then take an integral in space (or time).",dest='coordinate_time')
p.add_option('-d','--ignore-npd',help='Whether to discard and continue past non-positive-definite iterations.',dest='continue_past_npd',type='int')
p.add_option('-q','--quantiles',help="The quantile maps to generate. Should be in the form '0.05 0.25 0.5 0.75 0.95', and the inverted commas are important! Defaults to '0.05 0.25 0.5 0.75 0.95'",dest='quantile_list')

p.set_defaults(reps=10)
p.set_defaults(points=100)
p.set_defaults(iter=1000)
p.set_defaults(weight_raster=None)
p.set_defaults(coordinate_time='f')
p.set_defaults(continue_past_npd=0)
p.set_defaults(thin=10)
p.set_defaults(quantile_list='0.05 0.25 0.5 0.75 0.95')

(o, args) = p.parse_args()
if len(args) != 3:
    raise ValueError, 'You must supply exactly four positional arguments. You supplied %i.'%len(args)

if o.coordinate_time=='f':
    o.coordinate_time=False
elif o.coordinate_time=='t':
    o.coordinate_time=True
else:
    raise ValueError, 'Option --coordinate-time must be True or False.'
    
o.module, o.hf_name, o.burn = args
o.burn = int(o.burn)

import matplotlib
matplotlib.use('PDF')
matplotlib.interactive(False)

from map_utils import *
from generic_mbg import *
import tables as tb
import numpy as np
import os, imp, sys, time

mod_path, mod_name = os.path.split(o.module)
mod_basename, mod_ext = os.path.splitext(mod_name)
mod_search_path = [mod_path, os.getcwd()] + sys.path
mod = imp.load_module(mod_basename, *imp.find_module(mod_basename, mod_search_path))

