# Copyright (C) 2009 Anand Patil
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from optparse import OptionParser
import os, sys, time, imp, datetime

# Create option parser

req_doc = """

mbg-covariate-traces  Copyright (C) 2009 Anand Patil
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it under certain conditions.
See <http://www.gnu.org/licenses/> for the terms of the license.


  module                The module from which maps are to be generated.
  database-file         The name of the database file produced by the mcmc.

"""

p = OptionParser('usage: %prog module database-file [options]' + req_doc)

p.add_option('-t','--thin',help='How much to thin the MCMC trace. Defaults to 1, meaning no  thinsing.',dest='thin',type='int')
p.add_option('-b','--burn',help='How many burnin iterations to discard. Defaults to 0.',dest='burn',type='int')

p.set_defaults(thin=1)
p.set_defaults(burn=0)

o, args = parse_and_check_args(p,2)

M, hf, mod, mod_name = reload_model(o.module, o.hf_name)

from generic_mbg import *
exec(delayed_import_str)


# Load up given module and load its relevant contents
n = all_chain_len(hf)

# Generate covariate trace
def submod_has_covariates(s):
    if isinstance(s, pm.gp.GPSubmodel):
        if isinstance(s.C.value.eval_fun, CovarianceWithCovariates):
            return True
    return False
submods = set(filter(submod_has_covariates, M.containers))
names = {}
unique_names = []
for s in submods:
    names[s] = s.C.value.eval_fun.evaluators.keys()
    unique_names = unique_names+ map(lambda x: s.name + '_' + x, names[s])

cov_trace = np.rec.fromarrays([np.empty((n-o.burn)/o.thin) for k in unique_names], names=','.join(unique_names))

time_count = -np.inf
time_start = time.time()
    
last_pct = -1    
for i in xrange(o.burn,n,o.thin):
    
    if time.time() - time_count > 10:
        cur_pct = (i*100)/n
        if cur_pct > last_pct:
            print cur_pct, '% complete',
            last_pct = cur_pct
            time_count = time.time()     
            if i > 0:       
                print 'expect results '+time.ctime((time_count-time_start)*n/float(i)+time_start)        
            else:
                print
    
    all_chain_remember(M,i)
    
    for s in submods:
        samp = sample_covariate_values(s)
    for k in samp.iterkeys():
        cov_trace[s.name+'_'+k][(i-o.burn)/o.thin] = samp[k]

print 'Covariate traces produced in %f seconds.'%(time.time()-time_start)

# Write out
init_output_dir(o, 'covariate-traces')
pl.rec2csv(cov_trace, 'covariate-traces.csv')

for k in cov_trace.dtype.names:
    print 'Plotting %s'%k
    pl.clf()
    pl.plot(cov_trace[k],'k-')
    pl.title(k)
    pl.savefig(k+'.pdf')
