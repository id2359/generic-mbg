# Copyright (C) 2009 Anand Patil
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from optparse import OptionParser
import os, sys, time, imp, datetime

# Create option parser

req_doc = """

mbg-covariate-traces  Copyright (C) 2009 Anand Patil
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it under certain conditions.
See <http://www.gnu.org/licenses/> for the terms of the license.


  database-file         The name of the database file produced by the mcmc.

"""

p = OptionParser('usage: %prog module database-file [options]' + req_doc)

p.add_option('-t','--thin',help='How much to thin the MCMC trace. Defaults to 1, meaning no thinning.',dest='thin',type='int')
p.add_option('-b','--burn',help='How many burnin iterations to discard. Defaults to 0.',dest='burn',type='int')

p.set_defaults(thin=1)
p.set_defaults(burn=0)

o, args = p.parse_args()
from generic_mbg import all_chain_trace, check_args
check_args(args, 1)

o.hf_name = args[0]


import tables as tb
import numpy as np
import pylab as pl


hf = tb.openFile(o.hf_name)
names = []
traces = []
for k,v in hf.root.chain0.PyMCsamples.coldtypes.iteritems():
    if np.prod(v.shape)==1:
        names.append(k)
        traces.append(all_chain_trace(hf, k)[o.burn::o.thin])
        
text_trace = np.rec.fromarrays(traces, names=','.join(names))

# Load up given module and load its relevant contents
init_output_dir(o, 'text-traces')
pl.rec2csv(text_trace, 'text-traces.csv'))