# Copyright (C) 2009 Anand Patil
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


from optparse import OptionParser
import os


# Create option parser

req_doc = """

mbg-covariate-traces  Copyright (C) 2009 Anand Patil
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it under certain conditions.
See <http://www.gnu.org/licenses/> for the terms of the license.


  database-file         The name of the database file produced by the mcmc.

"""

p = OptionParser('usage: %prog module database-file [options]' + req_doc)

p.add_option('-f','--first',help='',dest='first',type='float')
p.add_option('-l','--last',help='',dest='last',type='float')
p.add_option('-i','--intervals',help='',dest='intervals',type='int')

p.set_defaults(first=.1)
p.set_defaults(last=.5)
p.set_defaults(intervals=20)

(o, args) = p.parse_args()
if len(args) != 1:
    raise ValueError, 'You must supply exactly one positional argument. You supplied %i.'%len(args)

o.hf_name = args[0]

from generic_mbg import all_chain_trace
import tables as tb
import numpy as np
import pylab as pl
import pymc as pm
import os

hf = tb.openFile(o.hf_name)
names = []
diags = []
for k,v in hf.root.chain0.PyMCsamples.coldtypes.iteritems():
    if np.prod(v.shape)==1:
        names.append(k)
        i,g = np.array(pymc.geweke(all_chain_trace(hf, k), o.first, o.last, o.intervals).T)
        diags.append(g)

names.append('breakpoints')
diags.append(i)
        
diag_ra = np.rec.fromarrays(diags, names=','.join(names))

# Load up given module and load its relevant contents
hf_path, hf_basename  = os.path.split(o.hf_name)
base_outname = os.path.splitext(hf_basename)[0]
pl.rec2csv(diag_ra, os.path.join(hf_path, hf_basename+'-geweke.csv'))